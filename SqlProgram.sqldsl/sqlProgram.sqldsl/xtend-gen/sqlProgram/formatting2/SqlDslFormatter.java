/**
 * generated by Xtext 2.30.0.M3
 */
package sqlProgram.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import sqlProgram.Clause;
import sqlProgram.Objects;
import sqlProgram.Queries;
import sqlProgram.QuickSelection;
import sqlProgram.SqlProgram;
import sqlProgram.services.SqlDslGrammarAccess;

@SuppressWarnings("all")
public class SqlDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SqlDslGrammarAccess _sqlDslGrammarAccess;

  protected void _format(final SqlProgram sqlProgram, @Extension final IFormattableDocument document) {
    EList<Queries> _queries = sqlProgram.getQueries();
    for (final Queries queries : _queries) {
      document.<Queries>format(queries);
    }
  }

  protected void _format(final QuickSelection quickSelection, @Extension final IFormattableDocument document) {
    EList<Objects> _objects = quickSelection.getObjects();
    for (final Objects objects : _objects) {
      document.<Objects>format(objects);
    }
    EList<Clause> _clauses = quickSelection.getClauses();
    for (final Clause clause : _clauses) {
      document.<Clause>format(clause);
    }
  }

  public void format(final Object quickSelection, final IFormattableDocument document) {
    if (quickSelection instanceof XtextResource) {
      _format((XtextResource)quickSelection, document);
      return;
    } else if (quickSelection instanceof QuickSelection) {
      _format((QuickSelection)quickSelection, document);
      return;
    } else if (quickSelection instanceof SqlProgram) {
      _format((SqlProgram)quickSelection, document);
      return;
    } else if (quickSelection instanceof EObject) {
      _format((EObject)quickSelection, document);
      return;
    } else if (quickSelection == null) {
      _format((Void)null, document);
      return;
    } else if (quickSelection != null) {
      _format(quickSelection, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(quickSelection, document).toString());
    }
  }
}
