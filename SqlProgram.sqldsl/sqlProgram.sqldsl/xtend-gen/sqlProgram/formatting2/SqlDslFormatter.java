/**
 * generated by Xtext 2.30.0.M3
 */
package sqlProgram.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import sqlProgram.Clause;
import sqlProgram.Objects;
import sqlProgram.Queries;
import sqlProgram.Selection;
import sqlProgram.SqlProgram;
import sqlProgram.services.SqlDslGrammarAccess;

@SuppressWarnings("all")
public class SqlDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SqlDslGrammarAccess _sqlDslGrammarAccess;

  protected void _format(final SqlProgram sqlProgram, @Extension final IFormattableDocument document) {
    EList<Queries> _queries = sqlProgram.getQueries();
    for (final Queries queries : _queries) {
      document.<Queries>format(queries);
    }
  }

  protected void _format(final Selection selection, @Extension final IFormattableDocument document) {
    EList<Objects> _objects = selection.getObjects();
    for (final Objects objects : _objects) {
      document.<Objects>format(objects);
    }
    EList<Clause> _clauses = selection.getClauses();
    for (final Clause clause : _clauses) {
      document.<Clause>format(clause);
    }
  }

  public void format(final Object selection, final IFormattableDocument document) {
    if (selection instanceof XtextResource) {
      _format((XtextResource)selection, document);
      return;
    } else if (selection instanceof Selection) {
      _format((Selection)selection, document);
      return;
    } else if (selection instanceof SqlProgram) {
      _format((SqlProgram)selection, document);
      return;
    } else if (selection instanceof EObject) {
      _format((EObject)selection, document);
      return;
    } else if (selection == null) {
      _format((Void)null, document);
      return;
    } else if (selection != null) {
      _format(selection, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(selection, document).toString());
    }
  }
}
