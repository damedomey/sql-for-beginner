/*
 * generated by Xtext 2.30.0.M3
 */
package sqlProgram.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SqlDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SqlProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.SqlProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSqlProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQueriesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQueriesQueriesParserRuleCall_1_0_0 = (RuleCall)cQueriesAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SqlProgram returns SqlProgram:
		//    {SqlProgram} (queries+=Queries ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SqlProgram} (queries+=Queries ";")*
		public Group getGroup() { return cGroup; }
		
		//{SqlProgram}
		public Action getSqlProgramAction_0() { return cSqlProgramAction_0; }
		
		//(queries+=Queries ";")*
		public Group getGroup_1() { return cGroup_1; }
		
		//queries+=Queries
		public Assignment getQueriesAssignment_1_0() { return cQueriesAssignment_1_0; }
		
		//Queries
		public RuleCall getQueriesQueriesParserRuleCall_1_0_0() { return cQueriesQueriesParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class QueriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Queries");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpdateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInsertionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Queries returns Queries:
		//    Selection | Creation | Update | Insertion | Delete;
		@Override public ParserRule getRule() { return rule; }
		
		//Selection | Creation | Update | Insertion | Delete
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Selection
		public RuleCall getSelectionParserRuleCall_0() { return cSelectionParserRuleCall_0; }
		
		//Creation
		public RuleCall getCreationParserRuleCall_1() { return cCreationParserRuleCall_1; }
		
		//Update
		public RuleCall getUpdateParserRuleCall_2() { return cUpdateParserRuleCall_2; }
		
		//Insertion
		public RuleCall getInsertionParserRuleCall_3() { return cInsertionParserRuleCall_3; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_4() { return cDeleteParserRuleCall_4; }
	}
	public class ObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Objects");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Objects returns Objects:
		//    Table | Column;
		@Override public ParserRule getRule() { return rule; }
		
		//Table | Column
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Table
		public RuleCall getTableParserRuleCall_0() { return cTableParserRuleCall_0; }
		
		//Column
		public RuleCall getColumnParserRuleCall_1() { return cColumnParserRuleCall_1; }
	}
	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSELECTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsTableParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cObjectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cObjectsTableParserRuleCall_4_1_0 = (RuleCall)cObjectsAssignment_4_1.eContents().get(0);
		private final Assignment cClausesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClausesClauseParserRuleCall_5_0 = (RuleCall)cClausesAssignment_5.eContents().get(0);
		
		//Selection returns Selection:
		//    {Selection}
		//    'SELECT' 'FROM'
		//        objects+=Table ("," objects+=Table)*
		//        (clauses+=Clause)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Selection}
		//'SELECT' 'FROM'
		//    objects+=Table ("," objects+=Table)*
		//    (clauses+=Clause)*
		public Group getGroup() { return cGroup; }
		
		//{Selection}
		public Action getSelectionAction_0() { return cSelectionAction_0; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_1() { return cSELECTKeyword_1; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_3_0() { return cObjectsTableParserRuleCall_3_0; }
		
		//("," objects+=Table)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_4_1() { return cObjectsAssignment_4_1; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_4_1_0() { return cObjectsTableParserRuleCall_4_1_0; }
		
		//(clauses+=Clause)*
		public Assignment getClausesAssignment_5() { return cClausesAssignment_5; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_5_0() { return cClausesClauseParserRuleCall_5_0; }
	}
	public class CreationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Creation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCREATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cTypeTABLEKeyword_2_0_0_0 = (Keyword)cTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cObjectsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cObjectsTableParserRuleCall_2_0_1_0 = (RuleCall)cObjectsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Assignment cConstaintsAssignment_2_0_2_0 = (Assignment)cGroup_2_0_2.eContents().get(0);
		private final RuleCall cConstaintsConstaintParserRuleCall_2_0_2_0_0 = (RuleCall)cConstaintsAssignment_2_0_2_0.eContents().get(0);
		private final Group cGroup_2_0_2_1 = (Group)cGroup_2_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_2_1_0 = (Keyword)cGroup_2_0_2_1.eContents().get(0);
		private final Assignment cConstaintsAssignment_2_0_2_1_1 = (Assignment)cGroup_2_0_2_1.eContents().get(1);
		private final RuleCall cConstaintsConstaintParserRuleCall_2_0_2_1_1_0 = (RuleCall)cConstaintsAssignment_2_0_2_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cTypeINDEXKeyword_2_1_0_0 = (Keyword)cTypeAssignment_2_1_0.eContents().get(0);
		private final Assignment cObjectsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cObjectsTableParserRuleCall_2_1_1_0 = (RuleCall)cObjectsAssignment_2_1_1.eContents().get(0);
		
		//Creation returns Creation:
		//    {Creation}
		//    'CREATE' (
		//        // table creation concrete syntax
		//        (
		//            type='TABLE' objects+=Table
		//            (constaints+=Constaint ( "," constaints+=Constaint)*)?
		//        ) |
		//        // index creation concrete syntax
		//        (
		//            type='INDEX' objects+=Table
		//        )
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//{Creation}
		//'CREATE' (
		//    // table creation concrete syntax
		//    (
		//        type='TABLE' objects+=Table
		//        (constaints+=Constaint ( "," constaints+=Constaint)*)?
		//    ) |
		//    // index creation concrete syntax
		//    (
		//        type='INDEX' objects+=Table
		//    )
		//)
		public Group getGroup() { return cGroup; }
		
		//{Creation}
		public Action getCreationAction_0() { return cCreationAction_0; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_1() { return cCREATEKeyword_1; }
		
		//(
		//       // table creation concrete syntax
		//       (
		//           type='TABLE' objects+=Table
		//           (constaints+=Constaint ( "," constaints+=Constaint)*)?
		//       ) |
		//       // index creation concrete syntax
		//       (
		//           type='INDEX' objects+=Table
		//       )
		//   )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//// table creation concrete syntax
		//(
		//    type='TABLE' objects+=Table
		//    (constaints+=Constaint ( "," constaints+=Constaint)*)?
		//)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//type='TABLE'
		public Assignment getTypeAssignment_2_0_0() { return cTypeAssignment_2_0_0; }
		
		//'TABLE'
		public Keyword getTypeTABLEKeyword_2_0_0_0() { return cTypeTABLEKeyword_2_0_0_0; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_2_0_1() { return cObjectsAssignment_2_0_1; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_2_0_1_0() { return cObjectsTableParserRuleCall_2_0_1_0; }
		
		//(constaints+=Constaint ( "," constaints+=Constaint)*)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//constaints+=Constaint
		public Assignment getConstaintsAssignment_2_0_2_0() { return cConstaintsAssignment_2_0_2_0; }
		
		//Constaint
		public RuleCall getConstaintsConstaintParserRuleCall_2_0_2_0_0() { return cConstaintsConstaintParserRuleCall_2_0_2_0_0; }
		
		//( "," constaints+=Constaint)*
		public Group getGroup_2_0_2_1() { return cGroup_2_0_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_2_1_0() { return cCommaKeyword_2_0_2_1_0; }
		
		//constaints+=Constaint
		public Assignment getConstaintsAssignment_2_0_2_1_1() { return cConstaintsAssignment_2_0_2_1_1; }
		
		//Constaint
		public RuleCall getConstaintsConstaintParserRuleCall_2_0_2_1_1_0() { return cConstaintsConstaintParserRuleCall_2_0_2_1_1_0; }
		
		//// index creation concrete syntax
		//(
		//    type='INDEX' objects+=Table
		//)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//type='INDEX'
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }
		
		//'INDEX'
		public Keyword getTypeINDEXKeyword_2_1_0_0() { return cTypeINDEXKeyword_2_1_0_0; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_2_1_1() { return cObjectsAssignment_2_1_1; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_2_1_1_0() { return cObjectsTableParserRuleCall_2_1_1_0; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUPDATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectsTableParserRuleCall_2_0 = (RuleCall)cObjectsAssignment_2.eContents().get(0);
		private final Assignment cClausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClausesClauseParserRuleCall_3_0 = (RuleCall)cClausesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClausesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cClausesClauseParserRuleCall_4_1_0 = (RuleCall)cClausesAssignment_4_1.eContents().get(0);
		
		//Update returns Update:
		//    {Update}
		//    'UPDATE' objects+=Table
		//    clauses+=Clause ( "," clauses+=Clause)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Update}
		//'UPDATE' objects+=Table
		//clauses+=Clause ( "," clauses+=Clause)*
		public Group getGroup() { return cGroup; }
		
		//{Update}
		public Action getUpdateAction_0() { return cUpdateAction_0; }
		
		//'UPDATE'
		public Keyword getUPDATEKeyword_1() { return cUPDATEKeyword_1; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_2() { return cObjectsAssignment_2; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_2_0() { return cObjectsTableParserRuleCall_2_0; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_3() { return cClausesAssignment_3; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_3_0() { return cClausesClauseParserRuleCall_3_0; }
		
		//( "," clauses+=Clause)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_4_1() { return cClausesAssignment_4_1; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_4_1_0() { return cClausesClauseParserRuleCall_4_1_0; }
	}
	public class InsertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Insertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInsertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cINSERTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cINTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsTableParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesValueParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_5_1_0 = (RuleCall)cValuesAssignment_5_1.eContents().get(0);
		
		//Insertion returns Insertion:
		//    {Insertion}
		//    'INSERT' 'INTO' objects+=Table
		//    values+=Value ( "," values+=Value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Insertion}
		//'INSERT' 'INTO' objects+=Table
		//values+=Value ( "," values+=Value)*
		public Group getGroup() { return cGroup; }
		
		//{Insertion}
		public Action getInsertionAction_0() { return cInsertionAction_0; }
		
		//'INSERT'
		public Keyword getINSERTKeyword_1() { return cINSERTKeyword_1; }
		
		//'INTO'
		public Keyword getINTOKeyword_2() { return cINTOKeyword_2; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_3_0() { return cObjectsTableParserRuleCall_3_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_4_0() { return cValuesValueParserRuleCall_4_0; }
		
		//( "," values+=Value)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_5_1_0() { return cValuesValueParserRuleCall_5_1_0; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeleteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDELETEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsTableParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cClausesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cClausesClauseParserRuleCall_4_0_0 = (RuleCall)cClausesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cClausesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cClausesClauseParserRuleCall_4_1_1_0 = (RuleCall)cClausesAssignment_4_1_1.eContents().get(0);
		
		//Delete returns Delete:
		//    {Delete}
		//    'DELETE' 'FROM' objects+=Table
		//    (clauses+=Clause ( "," clauses+=Clause)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Delete}
		//'DELETE' 'FROM' objects+=Table
		//(clauses+=Clause ( "," clauses+=Clause)*)?
		public Group getGroup() { return cGroup; }
		
		//{Delete}
		public Action getDeleteAction_0() { return cDeleteAction_0; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_1() { return cDELETEKeyword_1; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//objects+=Table
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }
		
		//Table
		public RuleCall getObjectsTableParserRuleCall_3_0() { return cObjectsTableParserRuleCall_3_0; }
		
		//(clauses+=Clause ( "," clauses+=Clause)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_4_0() { return cClausesAssignment_4_0; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_4_0_0() { return cClausesClauseParserRuleCall_4_0_0; }
		
		//( "," clauses+=Clause)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_4_1_1() { return cClausesAssignment_4_1_1; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_4_1_1_0() { return cClausesClauseParserRuleCall_4_1_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_3_0_0 = (RuleCall)cColumnsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_3_1_1_0 = (RuleCall)cColumnsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Table returns Table:
		//    {Table}
		//    name=EString
		//    '{'
		//        (columns+=Column ( "," columns+=Column)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Table}
		//name=EString
		//'{'
		//    (columns+=Column ( "," columns+=Column)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Table}
		public Action getTableAction_0() { return cTableAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(columns+=Column ( "," columns+=Column)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_0() { return cColumnsAssignment_3_0; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_0_0() { return cColumnsColumnParserRuleCall_3_0_0; }
		
		//( "," columns+=Column)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_1_1() { return cColumnsAssignment_3_1_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_1_1_0() { return cColumnsColumnParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		
		//Column returns Column:
		//    {Column}
		//    name=EString (type=[Type|EString])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Column}
		//name=EString (type=[Type|EString])?
		public Group getGroup() { return cGroup; }
		
		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(type=[Type|EString])?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Type|EString]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_2_0_1() { return cTypeTypeEStringParserRuleCall_2_0_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Alternatives cNameAlternatives_1_0_0 = (Alternatives)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameIntKeyword_1_0_0_0 = (Keyword)cNameAlternatives_1_0_0.eContents().get(0);
		private final Keyword cNameINTKeyword_1_0_0_1 = (Keyword)cNameAlternatives_1_0_0.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0_1 = (Alternatives)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameDoubleKeyword_1_0_1_0 = (Keyword)cNameAlternatives_1_0_1.eContents().get(0);
		private final Keyword cNameDOUBLEKeyword_1_0_1_1 = (Keyword)cNameAlternatives_1_0_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0_2 = (Alternatives)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameFloatKeyword_1_0_2_0 = (Keyword)cNameAlternatives_1_0_2.eContents().get(0);
		private final Keyword cNameFLOATKeyword_1_0_2_1 = (Keyword)cNameAlternatives_1_0_2.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0_3 = (Alternatives)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cNameDateKeyword_1_0_3_0 = (Keyword)cNameAlternatives_1_0_3.eContents().get(0);
		private final Keyword cNameDATEKeyword_1_0_3_1 = (Keyword)cNameAlternatives_1_0_3.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0_4 = (RuleCall)cNameAlternatives_1_0.eContents().get(4);
		
		//Type returns Type:
		//    {Type}
		//    name=(('int' | 'INT')| ('double' | 'DOUBLE') | ('float' | 'FLOAT') | ('date' | 'DATE')| EString);
		@Override public ParserRule getRule() { return rule; }
		
		//{Type}
		//name=(('int' | 'INT')| ('double' | 'DOUBLE') | ('float' | 'FLOAT') | ('date' | 'DATE')| EString)
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//name=(('int' | 'INT')| ('double' | 'DOUBLE') | ('float' | 'FLOAT') | ('date' | 'DATE')| EString)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(('int' | 'INT')| ('double' | 'DOUBLE') | ('float' | 'FLOAT') | ('date' | 'DATE')| EString)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//('int' | 'INT')
		public Alternatives getNameAlternatives_1_0_0() { return cNameAlternatives_1_0_0; }
		
		//'int'
		public Keyword getNameIntKeyword_1_0_0_0() { return cNameIntKeyword_1_0_0_0; }
		
		//'INT'
		public Keyword getNameINTKeyword_1_0_0_1() { return cNameINTKeyword_1_0_0_1; }
		
		//('double' | 'DOUBLE')
		public Alternatives getNameAlternatives_1_0_1() { return cNameAlternatives_1_0_1; }
		
		//'double'
		public Keyword getNameDoubleKeyword_1_0_1_0() { return cNameDoubleKeyword_1_0_1_0; }
		
		//'DOUBLE'
		public Keyword getNameDOUBLEKeyword_1_0_1_1() { return cNameDOUBLEKeyword_1_0_1_1; }
		
		//('float' | 'FLOAT')
		public Alternatives getNameAlternatives_1_0_2() { return cNameAlternatives_1_0_2; }
		
		//'float'
		public Keyword getNameFloatKeyword_1_0_2_0() { return cNameFloatKeyword_1_0_2_0; }
		
		//'FLOAT'
		public Keyword getNameFLOATKeyword_1_0_2_1() { return cNameFLOATKeyword_1_0_2_1; }
		
		//('date' | 'DATE')
		public Alternatives getNameAlternatives_1_0_3() { return cNameAlternatives_1_0_3; }
		
		//'date'
		public Keyword getNameDateKeyword_1_0_3_0() { return cNameDateKeyword_1_0_3_0; }
		
		//'DATE'
		public Keyword getNameDATEKeyword_1_0_3_1() { return cNameDATEKeyword_1_0_3_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0_4() { return cNameEStringParserRuleCall_1_0_4; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameANDKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameORKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameWHEREKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameSETKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameHAVINGKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cNameLIMITKeyword_0_0_5 = (Keyword)cNameAlternatives_0_0.eContents().get(5);
		private final Keyword cNameOFFSETKeyword_0_0_6 = (Keyword)cNameAlternatives_0_0.eContents().get(6);
		private final Keyword cNameAndKeyword_0_0_7 = (Keyword)cNameAlternatives_0_0.eContents().get(7);
		private final Keyword cNameOrKeyword_0_0_8 = (Keyword)cNameAlternatives_0_0.eContents().get(8);
		private final Keyword cNameWhereKeyword_0_0_9 = (Keyword)cNameAlternatives_0_0.eContents().get(9);
		private final Keyword cNameSetKeyword_0_0_10 = (Keyword)cNameAlternatives_0_0.eContents().get(10);
		private final Keyword cNameHavingKeyword_0_0_11 = (Keyword)cNameAlternatives_0_0.eContents().get(11);
		private final Keyword cNameLimitKeyword_0_0_12 = (Keyword)cNameAlternatives_0_0.eContents().get(12);
		private final Keyword cNameOffsetKeyword_0_0_13 = (Keyword)cNameAlternatives_0_0.eContents().get(13);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyComplexStringParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Clause returns Clause:
		//    name=(
		//            'AND'|'OR'|'WHERE'|'SET'|'HAVING'|'LIMIT'|'OFFSET'|
		//            'and'|'or'|'where'|'set'|'having'|'limit'|'offset'
		//        )
		//    body=ComplexString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//        'AND'|'OR'|'WHERE'|'SET'|'HAVING'|'LIMIT'|'OFFSET'|
		//        'and'|'or'|'where'|'set'|'having'|'limit'|'offset'
		//    )
		//body=ComplexString
		public Group getGroup() { return cGroup; }
		
		//name=(
		//        'AND'|'OR'|'WHERE'|'SET'|'HAVING'|'LIMIT'|'OFFSET'|
		//        'and'|'or'|'where'|'set'|'having'|'limit'|'offset'
		//    )
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//            'AND'|'OR'|'WHERE'|'SET'|'HAVING'|'LIMIT'|'OFFSET'|
		//            'and'|'or'|'where'|'set'|'having'|'limit'|'offset'
		//        )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'AND'
		public Keyword getNameANDKeyword_0_0_0() { return cNameANDKeyword_0_0_0; }
		
		//'OR'
		public Keyword getNameORKeyword_0_0_1() { return cNameORKeyword_0_0_1; }
		
		//'WHERE'
		public Keyword getNameWHEREKeyword_0_0_2() { return cNameWHEREKeyword_0_0_2; }
		
		//'SET'
		public Keyword getNameSETKeyword_0_0_3() { return cNameSETKeyword_0_0_3; }
		
		//'HAVING'
		public Keyword getNameHAVINGKeyword_0_0_4() { return cNameHAVINGKeyword_0_0_4; }
		
		//'LIMIT'
		public Keyword getNameLIMITKeyword_0_0_5() { return cNameLIMITKeyword_0_0_5; }
		
		//'OFFSET'
		public Keyword getNameOFFSETKeyword_0_0_6() { return cNameOFFSETKeyword_0_0_6; }
		
		//'and'
		public Keyword getNameAndKeyword_0_0_7() { return cNameAndKeyword_0_0_7; }
		
		//'or'
		public Keyword getNameOrKeyword_0_0_8() { return cNameOrKeyword_0_0_8; }
		
		//'where'
		public Keyword getNameWhereKeyword_0_0_9() { return cNameWhereKeyword_0_0_9; }
		
		//'set'
		public Keyword getNameSetKeyword_0_0_10() { return cNameSetKeyword_0_0_10; }
		
		//'having'
		public Keyword getNameHavingKeyword_0_0_11() { return cNameHavingKeyword_0_0_11; }
		
		//'limit'
		public Keyword getNameLimitKeyword_0_0_12() { return cNameLimitKeyword_0_0_12; }
		
		//'offset'
		public Keyword getNameOffsetKeyword_0_0_13() { return cNameOffsetKeyword_0_0_13; }
		
		//body=ComplexString
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ComplexString
		public RuleCall getBodyComplexStringParserRuleCall_1_0() { return cBodyComplexStringParserRuleCall_1_0; }
	}
	public class ConstaintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Constaint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTRAINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyComplexStringParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Constaint returns Constaint:
		//    'CONSTRAINT' body=ComplexString;
		@Override public ParserRule getRule() { return rule; }
		
		//'CONSTRAINT' body=ComplexString
		public Group getGroup() { return cGroup; }
		
		//'CONSTRAINT'
		public Keyword getCONSTRAINTKeyword_0() { return cCONSTRAINTKeyword_0; }
		
		//body=ComplexString
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ComplexString
		public RuleCall getBodyComplexStringParserRuleCall_1_0() { return cBodyComplexStringParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnvaluesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnvaluesColumnValueParserRuleCall_3_0_0 = (RuleCall)cColumnvaluesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnvaluesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnvaluesColumnValueParserRuleCall_3_1_1_0 = (RuleCall)cColumnvaluesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Value returns Value:
		//    {Value}
		//    'Value'
		//    '('
		//        (columnvalues+=ColumnValue ( "," columnvalues+=ColumnValue)*)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Value}
		//'Value'
		//'('
		//    (columnvalues+=ColumnValue ( "," columnvalues+=ColumnValue)*)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{Value}
		public Action getValueAction_0() { return cValueAction_0; }
		
		//'Value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(columnvalues+=ColumnValue ( "," columnvalues+=ColumnValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//columnvalues+=ColumnValue
		public Assignment getColumnvaluesAssignment_3_0() { return cColumnvaluesAssignment_3_0; }
		
		//ColumnValue
		public RuleCall getColumnvaluesColumnValueParserRuleCall_3_0_0() { return cColumnvaluesColumnValueParserRuleCall_3_0_0; }
		
		//( "," columnvalues+=ColumnValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//columnvalues+=ColumnValue
		public Assignment getColumnvaluesAssignment_3_1_1() { return cColumnvaluesAssignment_3_1_1; }
		
		//ColumnValue
		public RuleCall getColumnvaluesColumnValueParserRuleCall_3_1_1_0() { return cColumnvaluesColumnValueParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ColumnValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.ColumnValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ColumnValue returns ColumnValue:
		//    {ColumnValue} value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ColumnValue} value=EString
		public Group getGroup() { return cGroup; }
		
		//{ColumnValue}
		public Action getColumnValueAction_0() { return cColumnValueAction_0; }
		
		//value=EString
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}
	public class ComplexStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqlProgram.SqlDsl.ComplexString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cEStringParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ComplexString returns ecore::EString:
		//    EString(('.')?('*')?('=')?EString)*'()'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EString(('.')?('*')?('=')?EString)*'()'?
		public Group getGroup() { return cGroup; }
		
		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }
		
		//(('.')?('*')?('=')?EString)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.')?
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//('*')?
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//('=')?
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//EString
		public RuleCall getEStringParserRuleCall_1_3() { return cEStringParserRuleCall_1_3; }
		
		//'()'?
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	
	
	private final SqlProgramElements pSqlProgram;
	private final QueriesElements pQueries;
	private final ObjectsElements pObjects;
	private final SelectionElements pSelection;
	private final CreationElements pCreation;
	private final UpdateElements pUpdate;
	private final InsertionElements pInsertion;
	private final DeleteElements pDelete;
	private final EStringElements pEString;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final TypeElements pType;
	private final ClauseElements pClause;
	private final ConstaintElements pConstaint;
	private final ValueElements pValue;
	private final ColumnValueElements pColumnValue;
	private final ComplexStringElements pComplexString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSqlProgram = new SqlProgramElements();
		this.pQueries = new QueriesElements();
		this.pObjects = new ObjectsElements();
		this.pSelection = new SelectionElements();
		this.pCreation = new CreationElements();
		this.pUpdate = new UpdateElements();
		this.pInsertion = new InsertionElements();
		this.pDelete = new DeleteElements();
		this.pEString = new EStringElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.pType = new TypeElements();
		this.pClause = new ClauseElements();
		this.pConstaint = new ConstaintElements();
		this.pValue = new ValueElements();
		this.pColumnValue = new ColumnValueElements();
		this.pComplexString = new ComplexStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sqlProgram.SqlDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SqlProgram returns SqlProgram:
	//    {SqlProgram} (queries+=Queries ";")*;
	public SqlProgramElements getSqlProgramAccess() {
		return pSqlProgram;
	}
	
	public ParserRule getSqlProgramRule() {
		return getSqlProgramAccess().getRule();
	}
	
	//Queries returns Queries:
	//    Selection | Creation | Update | Insertion | Delete;
	public QueriesElements getQueriesAccess() {
		return pQueries;
	}
	
	public ParserRule getQueriesRule() {
		return getQueriesAccess().getRule();
	}
	
	//Objects returns Objects:
	//    Table | Column;
	public ObjectsElements getObjectsAccess() {
		return pObjects;
	}
	
	public ParserRule getObjectsRule() {
		return getObjectsAccess().getRule();
	}
	
	//Selection returns Selection:
	//    {Selection}
	//    'SELECT' 'FROM'
	//        objects+=Table ("," objects+=Table)*
	//        (clauses+=Clause)*
	//    ;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}
	
	//Creation returns Creation:
	//    {Creation}
	//    'CREATE' (
	//        // table creation concrete syntax
	//        (
	//            type='TABLE' objects+=Table
	//            (constaints+=Constaint ( "," constaints+=Constaint)*)?
	//        ) |
	//        // index creation concrete syntax
	//        (
	//            type='INDEX' objects+=Table
	//        )
	//    );
	public CreationElements getCreationAccess() {
		return pCreation;
	}
	
	public ParserRule getCreationRule() {
		return getCreationAccess().getRule();
	}
	
	//Update returns Update:
	//    {Update}
	//    'UPDATE' objects+=Table
	//    clauses+=Clause ( "," clauses+=Clause)*;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//Insertion returns Insertion:
	//    {Insertion}
	//    'INSERT' 'INTO' objects+=Table
	//    values+=Value ( "," values+=Value)*;
	public InsertionElements getInsertionAccess() {
		return pInsertion;
	}
	
	public ParserRule getInsertionRule() {
		return getInsertionAccess().getRule();
	}
	
	//Delete returns Delete:
	//    {Delete}
	//    'DELETE' 'FROM' objects+=Table
	//    (clauses+=Clause ( "," clauses+=Clause)*)?;
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Table returns Table:
	//    {Table}
	//    name=EString
	//    '{'
	//        (columns+=Column ( "," columns+=Column)*)?
	//    '}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column returns Column:
	//    {Column}
	//    name=EString (type=[Type|EString])?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Type returns Type:
	//    {Type}
	//    name=(('int' | 'INT')| ('double' | 'DOUBLE') | ('float' | 'FLOAT') | ('date' | 'DATE')| EString);
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Clause returns Clause:
	//    name=(
	//            'AND'|'OR'|'WHERE'|'SET'|'HAVING'|'LIMIT'|'OFFSET'|
	//            'and'|'or'|'where'|'set'|'having'|'limit'|'offset'
	//        )
	//    body=ComplexString;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//Constaint returns Constaint:
	//    'CONSTRAINT' body=ComplexString;
	public ConstaintElements getConstaintAccess() {
		return pConstaint;
	}
	
	public ParserRule getConstaintRule() {
		return getConstaintAccess().getRule();
	}
	
	//Value returns Value:
	//    {Value}
	//    'Value'
	//    '('
	//        (columnvalues+=ColumnValue ( "," columnvalues+=ColumnValue)*)?
	//    ')';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ColumnValue returns ColumnValue:
	//    {ColumnValue} value=EString;
	public ColumnValueElements getColumnValueAccess() {
		return pColumnValue;
	}
	
	public ParserRule getColumnValueRule() {
		return getColumnValueAccess().getRule();
	}
	
	//ComplexString returns ecore::EString:
	//    EString(('.')?('*')?('=')?EString)*'()'?
	//;
	public ComplexStringElements getComplexStringAccess() {
		return pComplexString;
	}
	
	public ParserRule getComplexStringRule() {
		return getComplexStringAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
