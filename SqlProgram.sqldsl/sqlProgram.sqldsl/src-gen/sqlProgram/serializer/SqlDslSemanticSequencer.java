/*
 * generated by Xtext 2.30.0.M3
 */
package sqlProgram.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import sqlProgram.Clause;
import sqlProgram.Column;
import sqlProgram.ColumnValue;
import sqlProgram.Constaint;
import sqlProgram.Creation;
import sqlProgram.Delete;
import sqlProgram.Insertion;
import sqlProgram.Selection;
import sqlProgram.SqlProgram;
import sqlProgram.SqlProgramPackage;
import sqlProgram.Table;
import sqlProgram.Type;
import sqlProgram.Update;
import sqlProgram.Value;
import sqlProgram.services.SqlDslGrammarAccess;

@SuppressWarnings("all")
public class SqlDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SqlDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SqlProgramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SqlProgramPackage.CLAUSE:
				sequence_Clause(context, (Clause) semanticObject); 
				return; 
			case SqlProgramPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case SqlProgramPackage.COLUMN_VALUE:
				sequence_ColumnValue(context, (ColumnValue) semanticObject); 
				return; 
			case SqlProgramPackage.CONSTAINT:
				sequence_Constaint(context, (Constaint) semanticObject); 
				return; 
			case SqlProgramPackage.CREATION:
				sequence_Creation(context, (Creation) semanticObject); 
				return; 
			case SqlProgramPackage.DELETE:
				sequence_Delete(context, (Delete) semanticObject); 
				return; 
			case SqlProgramPackage.INSERTION:
				sequence_Insertion(context, (Insertion) semanticObject); 
				return; 
			case SqlProgramPackage.SELECTION:
				sequence_Selection(context, (Selection) semanticObject); 
				return; 
			case SqlProgramPackage.SQL_PROGRAM:
				sequence_SqlProgram(context, (SqlProgram) semanticObject); 
				return; 
			case SqlProgramPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case SqlProgramPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case SqlProgramPackage.UPDATE:
				sequence_Update(context, (Update) semanticObject); 
				return; 
			case SqlProgramPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Clause
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name='AND' | 
	 *             name='OR' | 
	 *             name='WHERE' | 
	 *             name='SET' | 
	 *             name='HAVING' | 
	 *             name='LIMIT' | 
	 *             name='OFFSET' | 
	 *             name='and' | 
	 *             name='or' | 
	 *             name='where' | 
	 *             name='set' | 
	 *             name='having' | 
	 *             name='limit' | 
	 *             name='offset'
	 *         ) 
	 *         body=ComplexString
	 *     )
	 * </pre>
	 */
	protected void sequence_Clause(ISerializationContext context, Clause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ColumnValue returns ColumnValue
	 *
	 * Constraint:
	 *     value=EString
	 * </pre>
	 */
	protected void sequence_ColumnValue(ISerializationContext context, ColumnValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlProgramPackage.Literals.COLUMN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlProgramPackage.Literals.COLUMN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnValueAccess().getValueEStringParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Objects returns Column
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (name=EString type=[Type|EString]?)
	 * </pre>
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Constaint returns Constaint
	 *
	 * Constraint:
	 *     body=ComplexString
	 * </pre>
	 */
	protected void sequence_Constaint(ISerializationContext context, Constaint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlProgramPackage.Literals.CONSTAINT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlProgramPackage.Literals.CONSTAINT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstaintAccess().getBodyComplexStringParserRuleCall_1_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Queries returns Creation
	 *     Creation returns Creation
	 *
	 * Constraint:
	 *     ((type='TABLE' objects+=Table (constaints+=Constaint constaints+=Constaint*)?) | (type='INDEX' objects+=Table))
	 * </pre>
	 */
	protected void sequence_Creation(ISerializationContext context, Creation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Queries returns Delete
	 *     Delete returns Delete
	 *
	 * Constraint:
	 *     (objects+=Table (clauses+=Clause clauses+=Clause*)?)
	 * </pre>
	 */
	protected void sequence_Delete(ISerializationContext context, Delete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Queries returns Insertion
	 *     Insertion returns Insertion
	 *
	 * Constraint:
	 *     (objects+=Table values+=Value values+=Value*)
	 * </pre>
	 */
	protected void sequence_Insertion(ISerializationContext context, Insertion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Queries returns Selection
	 *     Selection returns Selection
	 *
	 * Constraint:
	 *     (objects+=Table objects+=Table* clauses+=Clause*)
	 * </pre>
	 */
	protected void sequence_Selection(ISerializationContext context, Selection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SqlProgram returns SqlProgram
	 *
	 * Constraint:
	 *     queries+=Queries*
	 * </pre>
	 */
	protected void sequence_SqlProgram(ISerializationContext context, SqlProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Objects returns Table
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=EString (columns+=Column columns+=Column*)?)
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (
	 *         name='int' | 
	 *         name='INT' | 
	 *         name='double' | 
	 *         name='DOUBLE' | 
	 *         name='float' | 
	 *         name='FLOAT' | 
	 *         name='date' | 
	 *         name='DATE' | 
	 *         name=EString
	 *     )
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Queries returns Update
	 *     Update returns Update
	 *
	 * Constraint:
	 *     (objects+=Table clauses+=Clause clauses+=Clause*)
	 * </pre>
	 */
	protected void sequence_Update(ISerializationContext context, Update semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (columnvalues+=ColumnValue columnvalues+=ColumnValue*)?
	 * </pre>
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
