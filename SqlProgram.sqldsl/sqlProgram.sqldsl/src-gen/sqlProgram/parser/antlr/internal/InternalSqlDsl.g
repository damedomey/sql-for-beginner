/*
 * generated by Xtext 2.30.0.M3
 */
grammar InternalSqlDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package sqlProgram.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sqlProgram.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sqlProgram.services.SqlDslGrammarAccess;

}

@parser::members {

 	private SqlDslGrammarAccess grammarAccess;

    public InternalSqlDslParser(TokenStream input, SqlDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SqlProgram";
   	}

   	@Override
   	protected SqlDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSqlProgram
entryRuleSqlProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSqlProgramRule()); }
	iv_ruleSqlProgram=ruleSqlProgram
	{ $current=$iv_ruleSqlProgram.current; }
	EOF;

// Rule SqlProgram
ruleSqlProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSqlProgramAccess().getSqlProgramAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSqlProgramAccess().getQueriesQueriesParserRuleCall_1_0_0());
					}
					lv_queries_1_0=ruleQueries
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSqlProgramRule());
						}
						add(
							$current,
							"queries",
							lv_queries_1_0,
							"sqlProgram.SqlDsl.Queries");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getSqlProgramAccess().getSemicolonKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQueries
entryRuleQueries returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueriesRule()); }
	iv_ruleQueries=ruleQueries
	{ $current=$iv_ruleQueries.current; }
	EOF;

// Rule Queries
ruleQueries returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQueriesAccess().getSelectionParserRuleCall_0());
		}
		this_Selection_0=ruleSelection
		{
			$current = $this_Selection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueriesAccess().getQuickSelectionParserRuleCall_1());
		}
		this_QuickSelection_1=ruleQuickSelection
		{
			$current = $this_QuickSelection_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueriesAccess().getCreationParserRuleCall_2());
		}
		this_Creation_2=ruleCreation
		{
			$current = $this_Creation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueriesAccess().getUpdateParserRuleCall_3());
		}
		this_Update_3=ruleUpdate
		{
			$current = $this_Update_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueriesAccess().getInsertionParserRuleCall_4());
		}
		this_Insertion_4=ruleInsertion
		{
			$current = $this_Insertion_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueriesAccess().getDeleteParserRuleCall_5());
		}
		this_Delete_5=ruleDelete
		{
			$current = $this_Delete_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQuickSelection
entryRuleQuickSelection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuickSelectionRule()); }
	iv_ruleQuickSelection=ruleQuickSelection
	{ $current=$iv_ruleQuickSelection.current; }
	EOF;

// Rule QuickSelection
ruleQuickSelection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuickSelectionAccess().getQuickSelectionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuickSelectionAccess().getMethodEStringParserRuleCall_1_0());
				}
				lv_method_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuickSelectionRule());
					}
					set(
						$current,
						"method",
						lv_method_1_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='FROM'
		{
			newLeafNode(otherlv_2, grammarAccess.getQuickSelectionAccess().getFROMKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuickSelectionAccess().getObjectsTableParserRuleCall_3_0());
				}
				lv_objects_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuickSelectionRule());
					}
					add(
						$current,
						"objects",
						lv_objects_3_0,
						"sqlProgram.SqlDsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getQuickSelectionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuickSelectionAccess().getObjectsTableParserRuleCall_4_1_0());
					}
					lv_objects_5_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuickSelectionRule());
						}
						add(
							$current,
							"objects",
							lv_objects_5_0,
							"sqlProgram.SqlDsl.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getQuickSelectionAccess().getClausesClauseParserRuleCall_5_0());
				}
				lv_clauses_6_0=ruleClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuickSelectionRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_6_0,
						"sqlProgram.SqlDsl.Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSelection
entryRuleSelection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectionRule()); }
	iv_ruleSelection=ruleSelection
	{ $current=$iv_ruleSelection.current; }
	EOF;

// Rule Selection
ruleSelection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelectionAccess().getSelectionAction_0(),
					$current);
			}
		)
		otherlv_1='SELECT'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectionAccess().getSELECTKeyword_1());
		}
		otherlv_2='FROM'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectionAccess().getFROMKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectionAccess().getObjectsTableParserRuleCall_3_0());
				}
				lv_objects_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectionRule());
					}
					add(
						$current,
						"objects",
						lv_objects_3_0,
						"sqlProgram.SqlDsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSelectionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectionAccess().getObjectsTableParserRuleCall_4_1_0());
					}
					lv_objects_5_0=ruleTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectionRule());
						}
						add(
							$current,
							"objects",
							lv_objects_5_0,
							"sqlProgram.SqlDsl.Table");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectionAccess().getClausesClauseParserRuleCall_5_0());
				}
				lv_clauses_6_0=ruleClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectionRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_6_0,
						"sqlProgram.SqlDsl.Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCreation
entryRuleCreation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreationRule()); }
	iv_ruleCreation=ruleCreation
	{ $current=$iv_ruleCreation.current; }
	EOF;

// Rule Creation
ruleCreation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCreationAccess().getCreationAction_0(),
					$current);
			}
		)
		otherlv_1='CREATE'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreationAccess().getCREATEKeyword_1());
		}
		(
			(
				(
					(
						lv_type_2_0='TABLE'
						{
							newLeafNode(lv_type_2_0, grammarAccess.getCreationAccess().getTypeTABLEKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCreationRule());
							}
							setWithLastConsumed($current, "type", lv_type_2_0, "TABLE");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCreationAccess().getObjectsTableOnCreationParserRuleCall_2_0_1_0());
						}
						lv_objects_3_0=ruleTableOnCreation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCreationRule());
							}
							add(
								$current,
								"objects",
								lv_objects_3_0,
								"sqlProgram.SqlDsl.TableOnCreation");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getCreationAccess().getConstaintsConstaintParserRuleCall_2_0_2_0_0());
							}
							lv_constaints_4_0=ruleConstaint
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCreationRule());
								}
								add(
									$current,
									"constaints",
									lv_constaints_4_0,
									"sqlProgram.SqlDsl.Constaint");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_5=','
						{
							newLeafNode(otherlv_5, grammarAccess.getCreationAccess().getCommaKeyword_2_0_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getCreationAccess().getConstaintsConstaintParserRuleCall_2_0_2_1_1_0());
								}
								lv_constaints_6_0=ruleConstaint
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCreationRule());
									}
									add(
										$current,
										"constaints",
										lv_constaints_6_0,
										"sqlProgram.SqlDsl.Constaint");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
			)
			    |
			(
				(
					(
						lv_type_7_0='INDEX'
						{
							newLeafNode(lv_type_7_0, grammarAccess.getCreationAccess().getTypeINDEXKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCreationRule());
							}
							setWithLastConsumed($current, "type", lv_type_7_0, "INDEX");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCreationAccess().getNameEStringParserRuleCall_2_1_1_0());
						}
						lv_name_8_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCreationRule());
							}
							set(
								$current,
								"name",
								lv_name_8_0,
								"sqlProgram.SqlDsl.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_9='ON'
				{
					newLeafNode(otherlv_9, grammarAccess.getCreationAccess().getONKeyword_2_1_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCreationAccess().getObjectsTableParserRuleCall_2_1_3_0());
						}
						lv_objects_10_0=ruleTable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCreationRule());
							}
							add(
								$current,
								"objects",
								lv_objects_10_0,
								"sqlProgram.SqlDsl.Table");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleUpdate
entryRuleUpdate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateRule()); }
	iv_ruleUpdate=ruleUpdate
	{ $current=$iv_ruleUpdate.current; }
	EOF;

// Rule Update
ruleUpdate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUpdateAccess().getUpdateAction_0(),
					$current);
			}
		)
		otherlv_1='UPDATE'
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateAccess().getUPDATEKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateAccess().getObjectsTableParserRuleCall_2_0());
				}
				lv_objects_2_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateRule());
					}
					add(
						$current,
						"objects",
						lv_objects_2_0,
						"sqlProgram.SqlDsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateAccess().getClausesClauseParserRuleCall_3_0());
				}
				lv_clauses_3_0=ruleClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_3_0,
						"sqlProgram.SqlDsl.Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getUpdateAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUpdateAccess().getClausesClauseParserRuleCall_4_1_0());
					}
					lv_clauses_5_0=ruleClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUpdateRule());
						}
						add(
							$current,
							"clauses",
							lv_clauses_5_0,
							"sqlProgram.SqlDsl.Clause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleInsertion
entryRuleInsertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertionRule()); }
	iv_ruleInsertion=ruleInsertion
	{ $current=$iv_ruleInsertion.current; }
	EOF;

// Rule Insertion
ruleInsertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInsertionAccess().getInsertionAction_0(),
					$current);
			}
		)
		otherlv_1='INSERT'
		{
			newLeafNode(otherlv_1, grammarAccess.getInsertionAccess().getINSERTKeyword_1());
		}
		otherlv_2='INTO'
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertionAccess().getINTOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertionAccess().getObjectsTableParserRuleCall_3_0());
				}
				lv_objects_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertionRule());
					}
					add(
						$current,
						"objects",
						lv_objects_3_0,
						"sqlProgram.SqlDsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='VALUES'
		{
			newLeafNode(otherlv_4, grammarAccess.getInsertionAccess().getVALUESKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getInsertionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertionAccess().getValuesValueParserRuleCall_6_0());
				}
				lv_values_6_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertionRule());
					}
					add(
						$current,
						"values",
						lv_values_6_0,
						"sqlProgram.SqlDsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getInsertionAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInsertionAccess().getValuesValueParserRuleCall_7_1_0());
					}
					lv_values_8_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInsertionRule());
						}
						add(
							$current,
							"values",
							lv_values_8_0,
							"sqlProgram.SqlDsl.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getInsertionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleDelete
entryRuleDelete returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	iv_ruleDelete=ruleDelete
	{ $current=$iv_ruleDelete.current; }
	EOF;

// Rule Delete
ruleDelete returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeleteAccess().getDeleteAction_0(),
					$current);
			}
		)
		otherlv_1='DELETE'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeleteAccess().getDELETEKeyword_1());
		}
		otherlv_2='FROM'
		{
			newLeafNode(otherlv_2, grammarAccess.getDeleteAccess().getFROMKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteAccess().getObjectsTableParserRuleCall_3_0());
				}
				lv_objects_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteRule());
					}
					add(
						$current,
						"objects",
						lv_objects_3_0,
						"sqlProgram.SqlDsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeleteAccess().getClausesClauseParserRuleCall_4_0_0());
					}
					lv_clauses_4_0=ruleClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeleteRule());
						}
						add(
							$current,
							"clauses",
							lv_clauses_4_0,
							"sqlProgram.SqlDsl.Clause");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getDeleteAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDeleteAccess().getClausesClauseParserRuleCall_4_1_1_0());
						}
						lv_clauses_6_0=ruleClause
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDeleteRule());
							}
							add(
								$current,
								"clauses",
								lv_clauses_6_0,
								"sqlProgram.SqlDsl.Clause");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTableAccess().getTableAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_0_0());
					}
					lv_columns_3_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableRule());
						}
						add(
							$current,
							"columns",
							lv_columns_3_0,
							"sqlProgram.SqlDsl.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getTableAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_1_1_0());
						}
						lv_columns_5_0=ruleColumn
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTableRule());
							}
							add(
								$current,
								"columns",
								lv_columns_5_0,
								"sqlProgram.SqlDsl.Column");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTableOnCreation
entryRuleTableOnCreation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableOnCreationRule()); }
	iv_ruleTableOnCreation=ruleTableOnCreation
	{ $current=$iv_ruleTableOnCreation.current; }
	EOF;

// Rule TableOnCreation
ruleTableOnCreation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTableOnCreationAccess().getTableAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTableOnCreationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableOnCreationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTableOnCreationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableOnCreationAccess().getColumnsColumnOnCreationParserRuleCall_3_0());
				}
				lv_columns_3_0=ruleColumnOnCreation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableOnCreationRule());
					}
					add(
						$current,
						"columns",
						lv_columns_3_0,
						"sqlProgram.SqlDsl.ColumnOnCreation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTableOnCreationAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTableOnCreationAccess().getColumnsColumnOnCreationParserRuleCall_4_1_0());
					}
					lv_columns_5_0=ruleColumnOnCreation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableOnCreationRule());
						}
						add(
							$current,
							"columns",
							lv_columns_5_0,
							"sqlProgram.SqlDsl.ColumnOnCreation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTableOnCreationAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColumnAccess().getColumnAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColumnOnCreation
entryRuleColumnOnCreation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnOnCreationRule()); }
	iv_ruleColumnOnCreation=ruleColumnOnCreation
	{ $current=$iv_ruleColumnOnCreation.current; }
	EOF;

// Rule ColumnOnCreation
ruleColumnOnCreation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColumnOnCreationAccess().getColumnAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnOnCreationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnOnCreationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_type_2_1='int'
					{
						newLeafNode(lv_type_2_1, grammarAccess.getColumnOnCreationAccess().getTypeIntKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_1, null);
					}
					    |
					lv_type_2_2='float'
					{
						newLeafNode(lv_type_2_2, grammarAccess.getColumnOnCreationAccess().getTypeFloatKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_2, null);
					}
					    |
					lv_type_2_3='varchar(100)'
					{
						newLeafNode(lv_type_2_3, grammarAccess.getColumnOnCreationAccess().getTypeVarchar100Keyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_3, null);
					}
					    |
					lv_type_2_4='char(100)'
					{
						newLeafNode(lv_type_2_4, grammarAccess.getColumnOnCreationAccess().getTypeChar100Keyword_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_4, null);
					}
					    |
					lv_type_2_5='text'
					{
						newLeafNode(lv_type_2_5, grammarAccess.getColumnOnCreationAccess().getTypeTextKeyword_2_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_5, null);
					}
					    |
					lv_type_2_6='date'
					{
						newLeafNode(lv_type_2_6, grammarAccess.getColumnOnCreationAccess().getTypeDateKeyword_2_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_6, null);
					}
					    |
					lv_type_2_7='INT'
					{
						newLeafNode(lv_type_2_7, grammarAccess.getColumnOnCreationAccess().getTypeINTKeyword_2_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_7, null);
					}
					    |
					lv_type_2_8='FLOAT'
					{
						newLeafNode(lv_type_2_8, grammarAccess.getColumnOnCreationAccess().getTypeFLOATKeyword_2_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_8, null);
					}
					    |
					lv_type_2_9='VARCHAR(100)'
					{
						newLeafNode(lv_type_2_9, grammarAccess.getColumnOnCreationAccess().getTypeVARCHAR100Keyword_2_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_9, null);
					}
					    |
					lv_type_2_10='CHAR(100)'
					{
						newLeafNode(lv_type_2_10, grammarAccess.getColumnOnCreationAccess().getTypeCHAR100Keyword_2_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_10, null);
					}
					    |
					lv_type_2_11='TEXT'
					{
						newLeafNode(lv_type_2_11, grammarAccess.getColumnOnCreationAccess().getTypeTEXTKeyword_2_0_10());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_11, null);
					}
					    |
					lv_type_2_12='DATE'
					{
						newLeafNode(lv_type_2_12, grammarAccess.getColumnOnCreationAccess().getTypeDATEKeyword_2_0_11());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnOnCreationRule());
						}
						setWithLastConsumed($current, "type", lv_type_2_12, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnOnCreationAccess().getConstaintsConstaintOnCreationParserRuleCall_3_0());
				}
				lv_constaints_3_0=ruleConstaintOnCreation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnOnCreationRule());
					}
					add(
						$current,
						"constaints",
						lv_constaints_3_0,
						"sqlProgram.SqlDsl.ConstaintOnCreation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleConstaint
entryRuleConstaint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstaintRule()); }
	iv_ruleConstaint=ruleConstaint
	{ $current=$iv_ruleConstaint.current; }
	EOF;

// Rule Constaint
ruleConstaint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CONSTRAINT'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstaintAccess().getCONSTRAINTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstaintAccess().getBodyComplexStringParserRuleCall_1_0());
				}
				lv_body_1_0=ruleComplexString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstaintRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"sqlProgram.SqlDsl.ComplexString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstaintOnCreation
entryRuleConstaintOnCreation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstaintOnCreationRule()); }
	iv_ruleConstaintOnCreation=ruleConstaintOnCreation
	{ $current=$iv_ruleConstaintOnCreation.current; }
	EOF;

// Rule ConstaintOnCreation
ruleConstaintOnCreation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConstaintOnCreationAccess().getBodyComplexStringParserRuleCall_0());
			}
			lv_body_0_0=ruleComplexString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConstaintOnCreationRule());
				}
				set(
					$current,
					"body",
					lv_body_0_0,
					"sqlProgram.SqlDsl.ComplexString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getBodyComplexStringParserRuleCall_1_0());
				}
				lv_body_1_0=ruleComplexString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"sqlProgram.SqlDsl.ComplexString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueAccess().getValueAction_0(),
					$current);
			}
		)
		otherlv_1='Value'
		{
			newLeafNode(otherlv_1, grammarAccess.getValueAccess().getValueKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getValueAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getValueAccess().getColumnvaluesColumnValueParserRuleCall_3_0_0());
					}
					lv_columnvalues_3_0=ruleColumnValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueRule());
						}
						add(
							$current,
							"columnvalues",
							lv_columnvalues_3_0,
							"sqlProgram.SqlDsl.ColumnValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getValueAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getValueAccess().getColumnvaluesColumnValueParserRuleCall_3_1_1_0());
						}
						lv_columnvalues_5_0=ruleColumnValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueRule());
							}
							add(
								$current,
								"columnvalues",
								lv_columnvalues_5_0,
								"sqlProgram.SqlDsl.ColumnValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getValueAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleColumnValue
entryRuleColumnValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnValueRule()); }
	iv_ruleColumnValue=ruleColumnValue
	{ $current=$iv_ruleColumnValue.current; }
	EOF;

// Rule ColumnValue
ruleColumnValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColumnValueAccess().getColumnValueAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnValueAccess().getValueEStringParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"sqlProgram.SqlDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComplexString
entryRuleComplexString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComplexStringRule()); }
	iv_ruleComplexString=ruleComplexString
	{ $current=$iv_ruleComplexString.current.getText(); }
	EOF;

// Rule ComplexString
ruleComplexString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComplexStringAccess().getEStringParserRuleCall_0());
		}
		this_EString_0=ruleEString
		{
			$current.merge(this_EString_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getComplexStringAccess().getFullStopKeyword_1_0());
				}
			)?
			(
				kw='*'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getComplexStringAccess().getAsteriskKeyword_1_1());
				}
			)?
			(
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getComplexStringAccess().getEqualsSignKeyword_1_2());
				}
			)?
			(
				kw='<'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getComplexStringAccess().getLessThanSignKeyword_1_3());
				}
			)?
			(
				kw='>'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getComplexStringAccess().getGreaterThanSignKeyword_1_4());
				}
			)?
			{
				newCompositeNode(grammarAccess.getComplexStringAccess().getEStringParserRuleCall_1_5());
			}
			this_EString_6=ruleEString
			{
				$current.merge(this_EString_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplexStringAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getComplexStringAccess().getEStringParserRuleCall_2_1());
			}
			this_EString_8=ruleEString
			{
				$current.merge(this_EString_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getComplexStringAccess().getCommaKeyword_2_2_0());
				}
				{
					newCompositeNode(grammarAccess.getComplexStringAccess().getEStringParserRuleCall_2_2_1());
				}
				this_EString_10=ruleEString
				{
					$current.merge(this_EString_10);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplexStringAccess().getRightParenthesisKeyword_2_3());
			}
		)?
	)
;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
